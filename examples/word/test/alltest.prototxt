name: "LogisticRegressionNet"
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  top: "typelabel"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/media/ghat/新加卷/HDF5/zhy/train/train_h5_list.txt"
    batch_size:32
  }
}

layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  top: "typelabel"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/media/ghat/新加卷/HDF5/zhy/train/train_h5_list.txt"
    batch_size:100
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 96
    kernel_size: 8
    stride: 4
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 384
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv4"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}


layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2000
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}

layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip3"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian" 
      std: 0.0001
      mean: 0
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer { 
  name: "data_all"
  type: "Concat"
  bottom: "ip2"
  bottom: "label"
  top: "data_all"
  concat_param {
    axis: 1
  }
}

layer {
  name: "ip4"
  type: "InnerProduct"
  bottom: "data_all"
  top: "ip4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 283
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip4"
  bottom: "typelabel"
  top: "accuracy"
  include {
    phase: TEST
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip4"
  bottom: "typelabel"
  top: "loss"
}
